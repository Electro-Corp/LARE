#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 TanFragPos;
in mat3 TBN;

struct Material {
    sampler2D texture_diffuse1;
    sampler2D texture_specular1;
    sampler2D texture_specular2;
    sampler2D texture_normal1;
    sampler2D texture_roughness1;
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quad;
};

uniform Material material;

uniform Light light;

uniform vec3 viewPosition;

uniform samplerCube skybox;

void main()
{
    vec3 tanLightPos = TBN * light.position;
    vec3 tanViewPos = TBN * viewPosition;
    // Vector things
    vec3 norm = texture(material.texture_normal1, TexCoords).rgb; //normalize(Normal);
    norm = normalize(norm * 2.0 - 1.0);
    norm = normalize(norm * TBN);
    // Direction vectors
    vec3 lDir = normalize(tanLightPos - TanFragPos);
    vec3 vDir = normalize(tanViewPos - TanFragPos);
    vec3 rDir = reflect(-lDir, norm);
    vec3 hDir = normalize(lDir + vDir);

    vec3 allTex = texture(material.texture_diffuse1, TexCoords).rgb;
    vec3 amb = light.ambient * allTex;

    // Diffuse
    float diff = max(dot(norm, lDir), 0.0); 
    vec3 diffuse = light.diffuse * (diff * allTex);

    // Specular
    float spec = pow(max(dot(norm, hDir), 0.0), 15.0f);

    vec3 I = normalize(TanFragPos - viewPosition);
    vec3 R = reflect(I, normalize(Normal));

    vec3 specular = light.specular * texture(material.texture_specular1, TexCoords).rgb * spec;

    vec3 reflect = texture(skybox, R).rgb * texture(material.texture_specular1, TexCoords).rgb;

    FragColor = vec4(diffuse + amb + specular, 1.0);
}

