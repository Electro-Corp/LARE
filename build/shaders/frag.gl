#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

struct Material {
    sampler2D texture_diffuse1;
    sampler2D texture_diffuse2;
    sampler2D texture_diffuse3;
    sampler2D texture_diffuse4;
    sampler2D texture_specular1;
    sampler2D texture_specular2;
    sampler2D texture_specular3;
    sampler2D texture_specular4;
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quad;
};

uniform Material material;

uniform Light light;

uniform vec3 viewPosition;

void main()
{
    vec3 allTex = texture(material.texture_diffuse1, TexCoords).rgb + texture(material.texture_diffuse2, TexCoords).rgb + texture(material.texture_diffuse3, TexCoords).rgb + texture(material.texture_diffuse4, TexCoords).rgb;
    vec3 amb = light.ambient * allTex;

    // Diffuse
    vec3 norm = normalize(Normal);
    vec3 dir = normalize(light.position - FragPos);
    float diff = max(dot(norm, dir), 0.0); 
    vec3 diffuse = light.diffuse * (diff * allTex);

    // Specular
    vec3 vDir = normalize(viewPosition - FragPos);
    vec3 rDir = reflect(-dir, norm);
    float spec = pow(max(dot(vDir, rDir), 0.0), 1.0f);
    vec3 specular = light.specular * texture(material.texture_specular1, TexCoords).rgb * spec;

    FragColor = vec4(diffuse + amb + specular, 1.0);
}

